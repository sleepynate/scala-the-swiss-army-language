| \*\gScala: The Swiss Army Language

| \cwith Nathan Dotz


https://git.io/oscon16-scala

:bird:   \ctwitter:  @nathandotz
:octopus:   \mgithub:   @sleepynate
:sparkling_heart:   \yemployer: @DetroitLabs
---
| \*\gPart 3: Recursion and higher-order functions
---
| \*\gRecursion
---
| \*\gRecursion for mathematicians

Factorial:

b(0) = 1
b(n) = n · b(n-1)
---
| \*\gRecursion for mathematicians

b(3) = 3 · b(2)

b(2) = 3 · 2 · b(1)

b(1) = 3 · 2 · 1 b(0)

b(0) = 3 · 2 · 1 · 1
---
| \*\gRecursion for mathematicians

\cb(0) = 1\s

This is called the \ybase\s case


\cb(n) = n · b(n-1)\s

This is called the \yrecursive\s case
---
| \*\gRecursion for developers

```
def factorial(n:Int):Int = n match {
    case 0 => 1
    case _ => n * factorial(n-1)
}
```


This is how we describe that
same function in Scala.
---
| \*\gRecursion



The concept is pretty simple, but thinking recursively can
take some practice. So, let's get plenty of practice.

---
| \*\gRecursion

scala> ```List(1,2,3,4).min```
res4: Int = 1

scala> ```List('d','z','r','q','y')```
res5: List[Char] = List(d, z, r, q, y)

scala> ```List('d','z','r','q','y').min```
res6: Char = d

scala> ```List("hawkeye", "superman", "spiderman").min```
res7: String = hawkeye


Let's replicate this built-in fucnction for Lists
---
| \*\gRecursion

```
def minimum(l:List[Int]):Int = l match {
    case x :: Nil => x
    case x :: y :: Nil => if (x < y) x else y
    case x :: xs => if (x < minimum(xs)) x else minimum(xs)
}
```


This is OK. It works. If we know what the definition of
minimum is for an list with one item, do we need a
definition for the minimum of a list with two items?
---
| \*\gRecursion

```
def minimum(l:List[Int]):Int = l match {
    case x :: Nil => x
    case x :: xs => {
        val y = minimum(xs)
        if (x < y) x else y
    }
}
```


This is better.
---
| \*\gRecursion

scala> ```List.fill(7)(0)```
res0: List[Int] = List(0, 0, 0, 0, 0, 0, 0)


How can we re-implement this function?
---
| \*\gRecursion

```
def moar(howMany:Int)(thing:Int):List[Int] = {
    if (howMany <= 0) Nil
    else thing :: moar(howMany - 1)(thing)
}
```


--
scala> ```moar(7)(0) == List.fill(7)(0)```
res3: Boolean = true


Note that there's no need for a match block here.
---
| \*\gRecursion

scala> ```(1 to 10).toList.take(3)```
res7: List[Int] = List(1, 2, 3)

scala> ```List(1,2,3).take(32789213)```
res8: List[Int] = List(1, 2, 3)

scala> ```Nil.take(5)```
res9: List[Nothing] = List()


What do you think the base cases are for \ytake\s?
---
| \*\gRecursion

```
def gimme(howMany:Int, things:List[Int]):List[Int] = {
    if (howMany <= 0) Nil
    else things match {
        case Nil => Nil
        case t :: ts => t :: gimme(howMany - 1, ts)
    }
}
```

--
scala> ```val ls = (1 to 10).toList```
res0: List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)

scala> ```gimme(4, ls) == ls.take(4)```
res1: Boolean = true
---
| \*\gRecursion

How can we reverse a list?
--

If we think, what is the base case? What does a reversed
list look like?
--

I'd say if there are things in the list, then it's the
reverse of the rest of the list, with the current
element added on the end.
---
| \*\gRecursion

```
def backwards(things: List[Int]):List[Int] = things match {
    case Nil => Nil
    case t :: ts => backwards(ts) ++ List(t)
}
```


scala> ```backwards(List(1,2,3,4)) == List(1,2,3,4).reverse```
res0: Boolean = true
---
| \*\gRecursion

How would we implement \yzip\s?

scala> ```List(1,3,5).zip(List(2,4,6))```
res0: List[(Int, Int)] = List((1,2), (3,4), (5,6))
---
| \*\gRecursion

```
def zip(things: List[Int], moreThings: List[Int]):List[(Int, Int)] =
(things, moreThings) match {
    case (Nil, _) => Nil
    case (_, Nil) => Nil
    case (t :: ts, m :: ms) => (t, m) :: zip(ts, ms)
}
```

scala> ```zip(List(1,2,3), List(5,6,7,8)) == List(1,2,3).zip(List(5,6,7,8))```
res2: Boolean = true
---
| \*\gRecursion

How can we find if a list contains an item?


- What is the base case we would use?
- What decompositions would we need?
- Will we use guards?
---
| \*\gRecursion

```
def has(things: List[Any], thing:Any):Boolean = things match {
    case Nil => false
    case (t :: ts) if (t == thing) => true
    case (t :: ts) => has(ts, thing)
}
```

scala> ```has(List(1,2,3,4), 2) == List(1,2,3,4).contains(2)```
res4: Boolean = true
---
| \*\gRecursive sorting

How to quicksort:

1) pick an item of the list - this is the \rpivot\s
2) put all items less than the pivot on the left
3) put all items greater than the pivot on the right
4) perform quicksort on the left set of numbers
5) perform quicksort on the right set of numbers
6) stick all the numbers together
---
| \*\gRecursive sorting


                         (4, 9, 3, 2, 1, 7, 6, 8, 5)
              (3, 2, 1), (4),                             (9, 7, 6, 8, 5)
     (2, 1),  (3), (),    |                 (7, 6, 8, 5), (9), ()
(1), (2), (),  |          |        (6, 5),  (7), (8),      |    |
 |    |    |   |          |   (5), (6), (),  |    |        |    |
(1), (2), (), (3),       (4), (5), (6), (), (7), (8),     (9), ()
---
```
def quicksort(l: List[Int]): List[Int] = l match {
    case Nil => Nil
    case i :: Nil => List(i)
    case pivot :: rest => {
        val left = quicksort(for(x <- rest if (x < pivot)) yield x)
        val right = quicksort(for(x <- rest if (x >= pivot)) yield x)
        left ++ List(pivot) ++ right
    }
}
```

quicksort: (l: List[Int])List[Int]

scala> ```quicksort(List(4, 9, 3, 2, 1, 7, 6, 8, 5))```
res0: List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9)
---
| \*\gHigher-order functions
---
| \*\gHigher-order functions

Higher-order functions are functions that take
functions as parameters or return functions.
---
| \*\gHigher-order functions

scala> ```val f:(Int) => Int = _ + 1```
f: Int => Int = <function1>
---
| \*\gHigher-order functions

def doTwice(x: Int, f: Int => Int) = f(f(x))
doTwice: (x: Int, f: Int => Int)Int

scala> doTwice(5, _ + 1)
res0: Int = 7

scala> doTwice(3, _ * 7)
res1: Int = 147

scala> def f(x:Int) = x.toString.reverse.toInt + x
f: (x: Int)Int

scala> doTwice(123, f)
res4: Int = 888
---
| \*\gHigher-order functions and types

```
def zipWith[A,B,C](left:List[A], right:List[B], f: (A, B) => C)
```
---
| \*\gHigher-order functions and types

```
def zipWith[A,B,C](l:List[A], r:List[B], f:(A,B) => C):List[C] =
    (l, r) match {
        case (Nil, _) => Nil
        case (_, Nil) => Nil
        case (t :: ts, m :: ms) => f(t, m) :: zipWith(ts, ms, f)
    }
```

scala> ```val l = List(1, 2, 3)```
l: List[Int] = List(1, 2, 3)

scala> ```val r = List("happy puppy", "bananas", "generic types")```
r: List[String] = List(happy puppy, bananas, generic types)

scala> ```zipWith(l, r, (a:Int, b:String) => a.toString + " " + b)```
res6: List[String] = List(1 happy puppy, 2 bananas, 3 generic types)
---
| \*\gHigher-order functions and types

We can curry functions as we define them with multiple parameter lists.

```
def zipWith2[A,B,C](l:List[A], r:List[B])(f: (A, B) => C):List[C] =
    (l, r) match {
        case (Nil, _) => Nil
        case (_, Nil) => Nil
        case (t :: ts, m :: ms) => f(t, m) :: zipWith2(ts, ms)(f)
    }
```
---
| \*\gHigher-order functions and types

scala> ```val l = List(1, 2, 3)```
l: List[Int] = List(1, 2, 3)

scala> ```val r = List("happy puppy", "bananas", "generic types")```
r: List[String] = List(happy puppy, bananas, generic types)

scala> ```val needsWith:((Int,String)=>String)=>List[String] = zipWith(l,r,_)```
needsWith: ((Int, String) => String) => List[String] = <function1>

We can partially apply zipWith to get the curried version.
---
scala> ```zipWith2(l,r)((a:Int, b:String) => a.toString + " " + b)```
res0: List[String] = List(1 happy puppy, 2 bananas, 3 generic types)

scala> ```needsWith((a:Int, b:String) => a.toString + " " + b)```
res1: List[String] = List(1 happy puppy, 2 bananas, 3 generic types)

scala> ```zipWith2(l,r)((a, b) => a.toString + " " + b)```
res2: List[String] = List(1 happy puppy, 2 bananas, 3 generic types)

scala> ```needsWith((a, b) => a.toString + " " + b)```
res3: List[String] = List(1 happy puppy, 2 bananas, 3 generic types)

scala> ```zipWith2(l,r)(_ + " " + _)```
res4: List[String] = List(1 happy puppy, 2 bananas, 3 generic types)

scala> ```needsWith(_ + " " + _)```
res5: List[String] = List(1 happy puppy, 2 bananas, 3 generic types)
---
| \*\gHigher-order functions

Classic Hits of Functional Abstraction!


Let's take a look at some common higher order functions
that you're likely to use in everyday code and they're
corresponding naïve implementations.
---
| \*\gHigher-order functions

```
def map[A, B](l: List[A])(f: A => B): List[B] = l match {
    case Nil => Nil
    case h :: t => f(h) :: map(t)(f)
}
```

scala> ```map(List(1,2,3,4))(_ + 1)```
res0: List[Int] = List(2, 3, 4, 5)

scala> ```map(List(1,2,3,4))(_ + "!")```
res1: List[String] = List(1!, 2!, 3!, 4!)

scala> ```map(List(1,2,3,4))(n => n * n + 17)```
res2: List[Int] = List(18, 21, 26, 33)
---
| \*\gHigher-order functions

```
for(x <- List(1,2,3)) yield x * x
```

```
List(1,2,3).map(x => x * x)
```
---
| \*\gHigher-order functions

```
def filter[A](l: List[A])(f: A => Boolean): List[A] = l match {
    case Nil => Nil
    case h :: t =>
        if (f(h)) h :: filter(t)(f)
        else filter(t)(f)
}
```

scala> ```filter(List(1,2,3,4,5,6,7))( _ % 2 != 0)```
res0: List[Int] = List(1, 3, 5, 7)

scala> ```filter(List("apple", "banana", "pickle", "guava"))(_ contains 'p')```
res1: List[String] = List(apple, pickle)
---
| \*\gHigher-order functions

```
def quicksort(l: List[Int]): List[Int] = l match {
    case Nil => Nil
    case i :: Nil => List(i)
    case pivot :: rest => quicksort(rest.filter(_ < pivot)) ++
                          List(pivot) ++
                          quicksort(rest.filter(_ >= pivot))
}
```

scala> ```quicksort(List(4, 9, 3, 2, 1, 7, 6, 8, 5))```
res2: List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9)
---
| \*\gHigher-order functions

```
def collatzSequence(from:Int):List[Int] = from match {
    case 1 => List(1)
    case n if(n % 2 == 0) => n :: collatzSequence(n / 2)
    case n => n :: collatzSequence(n * 3 + 1)
}
```

scala> ```collatzSequence(13).length```
res0: Int = 10
---
| \*\gHigher-order functions

What is the first collatz sequence with more than 10 elements?

scala> (1 to 20).map(collatzSequence).dropWhile(_.length <= 10).head
res3: List[Int] = List(7, 22, 11, 34, 17, 52, 26, //…

scala> res3.length
res4: Int = 17

How many collatz sequences that start below 100
are longer than 10 elements?

scala> ```(1 until 100).map(collatzSequence).filter(_.length > 10).length```
res5: Int = 79
---
| \*\gHigher-order functions

Lambda functions

scala> ```(x:Int) => x + 1```
res0: Int => Int = <function1>

---
| \*\gHigher-order functions

scala> val f = _ + 1
<console>:7: error: missing parameter type for
                    expanded function ((x$1) => x$1.$plus(1))
       val f = _ + 1

--
scala> ```val f:Int => Int = _ + 1```
f: Int => Int = <function1>

```
(1 to 100).takeWhile(_ < 10)
```
```
(1 to 100).takeWhile(x => x < 10)
```
---
| \*\gHigher-order functions

Folding

scala> ```List(1,2,3,4,5).foldLeft(1)( (acc, i) => acc * i)```

1 * 1 // List(2,3,4,5)

1 * 2 // List(3,4,5)

2 * 3 // List(4,5)

6 * 4 // List(5)

24 * 5
---
| \*\gHigher-order functions

scala> ```List(1,2,3,4,5).foldRight(1)((acc, i) => acc * i)```
res0: Int = 120

scala> ```def product(ints: List[Int])=ints.foldRight(1)((acc,i)=>acc * i)```
product: (ints: List[Int])Int

scala> ```product(List(1,2,3,4,5))```
res1: Int = 120

scala> ```product(List(4,2,5,6,2,6,3,9))```
res2: Int = 77760
---
| \*\gHigher-order functions

scala> def map[A, B](l: List[A])(f: A => B): List[B] =
              l.foldRight(Nil: List[B])((x, xs) => f(x) :: xs)

map: [A, B](l: List[A])(f: A => B)List[B]

scala>  map(List(1,2,3,4))(_ * 2)
res4: List[Int] = List(2, 4, 6, 8)
---
| \*\gHigher-order functions

scala> ```List(1,2,3,4).reduceLeft(_*_)```
res0: Int = 24

scala> ```def maxi(l: List[Int]) = l.reduceLeft(_ max _)```
maxi: (l: List[Int])Int

scala> ```maxi(List(3,5,12,6,12,3,6,1,6,34,2))```
res1: Int = 34
---
| \*\gHigher-order functions

Composing functions

scala> ```val g = (i:Int) => i * 2```
g: Int => Int = <function1>

scala> ```val f = (i:Int) => i + 1```
f: Int => Int = <function1>

scala> ```val h = f compose g```
h: Int => Int = <function1>

scala> ```h(2)```
res0: Int = 5

scala> ```h(2) == f(g(2))```
res1: Boolean = true
---
| \*\gHigher-order functions

scala> ```List(4, 9, 16).map(math.abs _).map(_.toDouble).map(math.sqrt _)```
res0: List[Double] = List(2.0, 3.0, 4.0)
--

scala> ```List(4, 9, 16).map(i => math.sqrt(math.abs(i).toDouble))```
res1: List[Double] = List(2.0, 3.0, 4.0)
---
| \*\gHigher-order functions

scala> ```val abs = math.abs _```
abs: Int => Int = <function1>

scala> ```val toD = (i:Int) => i.toDouble```
toD: Int => Double = <function1>

scala> ```val sqrt = math.sqrt _```
sqrt: Double => Double = <function1>

scala> ```List(4,9,16).map(sqrt compose toD compose abs)```
res3: List[Double] = List(2.0, 3.0, 4.0)
---
| \*\gEnd of Part 3!

/ :tulip:  :smile: \s
| :relieved:  Go take a break, you deserve it! :relieved:
/ :hamster:  :doughnut: \s
